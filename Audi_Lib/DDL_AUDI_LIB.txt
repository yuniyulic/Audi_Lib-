#20220410
#BOOK_INFO_VIEW
#BOOK_RENT_COUNT
 

ALTER TABLE LIB_MEMBER ADD FAIL_CNT NUMBER DEFAULT 0 NOT NULL;
-- 스터디룸 예약 정보
CREATE TABLE STUDY_ROOM_INFO(
    STUDY_ROOM_CODE VARCHAR2(100) PRIMARY KEY    -- ROOM_1 ... ROOM_10 스터디룸 개수 10개
    , STUDY_ROOM_NAME VARCHAR2(100) NOT NULL  -- 대토론실 1개 / 미디어실 3개 / 소토론실 3개 / 발표실 3개
);
CREATE TABLE STUDY_ROOM_RENT_INFO(
    MEMBER_CODE VARCHAR2(100) REFERENCES LIB_MEMBER(MEMBER_CODE)
    , IS_RENT VARCHAR2(100) DEFAULT 'N'
    , RENT_TIME TIMESTAMP
    , RENT_DATE DATE
    , RENT_STU NUMBER   --빌린 학생 수 (대토론실:50명 / 나머지 10명)
    , ROOM_RENT_MEMBER VARCHAR2(100)
    , STUDY_ROOM_CODE VARCHAR2(100) REFERENCES STUDY_ROOM_INFO(STUDY_ROOM_CODE)
);
-- 스터디룸 VIEW 생성
CREATE VIEW STUDY_ROOM_VIEW
AS
(SELECT SRI.STUDY_ROOM_CODE
    , STUDY_ROOM_NAME
    , SRRI.MEMBER_CODE
    , IS_RENT
    , RENT_TIME
    , RENT_DATE
    , RENT_STU
    , MEMBER_NAME
FROM STUDY_ROOM_INFO SRI, STUDY_ROOM_RENT_INFO SRRI, LIB_MEMBER L
WHERE SRI.STUDY_ROOM_CODE = SRRI.STUDY_ROOM_CODE
AND SRRI.MEMBER_CODE = L.MEMBER_CODE);
-- ParkingViewVO 생성
CREATE VIEW PARKING_VIEW
AS
(SELECT PARKING_CODE
    , PARKING_PRICE
    , IS_AFTERNOON
    , IS_PARKING
    , FACILITY_CODE
    , PARKING_DATE
    , PARKING_LOC
    , MEMBER_NAME
    , MEMBER_CODE
FROM PARKING_INFO, LIB_MEMBER 
WHERE PARKING_MEMBER = MEMBER_CODE);
ALTER TABLE LIB_MEMBER_LEVEL ADD(AVAILABLE_RENT_BOOK_NUMBER NUMBER DEFAULT 0);
UPDATE LIB_MEMBER_LEVEL
SET
    AVAILABLE_RENT_BOOK_NUMBER = DECODE(MEMBER_LEVEL, 1, 3, 2, 5, 3, 10);
CREATE TABLE BOARD_NOTICE_INFO(
    BOARD_CODE VARCHAR2(100) PRIMARY KEY
    , BOARD_TITLE VARCHAR2(100) NOT NULL
    , BOARD_CONTENT VARCHAR2(1000)
    , REG_MEMBER VARCHAR2(100) REFERENCES LIB_MEMBER(MEMBER_CODE) ON DELETE SET NULL
    , REG_DATE DATE DEFAULT SYSDATE
    , READ_CNT NUMBER DEFAULT 1
    , SEQ NUMBER
);ALTER TABLE BOARD_NOTICE_INFO ADD IS_NOTICE NUMBER DEFAULT 1;

GRANT CREATE VIEW TO TMAX; 

CREATE TABLE BOOK_INFO
(
    BOOK_CODE                VARCHAR2(100)    PRIMARY KEY, 
    CATEGORY_CODE            VARCHAR2(100)    DEFAULT '1', 
    BOOK_TITLE               VARCHAR2(100)    NOT NULL, 
    PUBLISHER                VARCHAR2(50)     NOT NULL, 
    AUTHOR                   VARCHAR2(100)    NOT NULL, 
    BOOK_PUBLICATION_DATE    NUMBER           NOT NULL, 
    ACQUISITION_DATE         DATE             DEFAULT SYSDATE, 
    BOOK_PREVIEW             VARCHAR2(300)    , 
    BOOK_IMAGE_NAME          VARCHAR2(100)    , 
    BOOK_CLASS               NUMBER           NOT NULL
);
/

COMMENT ON TABLE BOOK_INFO IS '책 정보'
/

COMMENT ON COLUMN BOOK_INFO.BOOK_CODE IS '책 코드(BOOK_1,... BOOK_144, ...)'
/

COMMENT ON COLUMN BOOK_INFO.CATEGORY_CODE IS '카테고리코드'
/

COMMENT ON COLUMN BOOK_INFO.BOOK_TITLE IS '책 제목'
/

COMMENT ON COLUMN BOOK_INFO.PUBLISHER IS '출판사'
/

COMMENT ON COLUMN BOOK_INFO.AUTHOR IS '작가'
/

COMMENT ON COLUMN BOOK_INFO.BOOK_PUBLICATION_DATE IS '도서발행년도'
/

COMMENT ON COLUMN BOOK_INFO.ACQUISITION_DATE IS '도서취득일'
/

COMMENT ON COLUMN BOOK_INFO.BOOK_PREVIEW IS '책 설명'
/

COMMENT ON COLUMN BOOK_INFO.BOOK_IMAGE_NAME IS '책 이미지이름'
/

COMMENT ON COLUMN BOOK_INFO.BOOK_CLASS IS '책 분류 번호 (0~9)'
/

CREATE TABLE BOOK_CLASS
(
    BOOK_CLASS               NUMBER          PRIMARY KEY, 
    BOOK_CLASS_NAME          VARCHAR2(20)    NOT NULL, 
    BOOK_CLASS_RENT_COUNT    NUMBER          DEFAULT 0 
)
/

COMMENT ON TABLE BOOK_CLASS IS '책 분류의 이름과 총 대여 횟수(분류별 목록 띄웠을 때 정렬하기 위함)'
/

COMMENT ON COLUMN BOOK_CLASS.BOOK_CLASS IS '책 분류 번호'
/

COMMENT ON COLUMN BOOK_CLASS.BOOK_CLASS_NAME IS '책 분류의 이름'
/

COMMENT ON COLUMN BOOK_CLASS.BOOK_CLASS_RENT_COUNT IS 'DEFAULT = 0'
/

CREATE TABLE BOOK_RENT_INFO
(
    RENT_CODE         VARCHAR2(100)    PRIMARY KEY, 
    RENT_MEMBER       VARCHAR2(100)    REFERENCES LIB_MEMBER(MEMBER_CODE), 
    RENT_BOOK_CODE    VARCHAR2(100)    REFERENCES BOOK_INFO(BOOK_CODE), 
    RENT_DATE         DATE             NOT NULL, 
    RETURN_DATE       DATE             NOT NULL, 
    IS_RETURN         VARCHAR2(10)     DEFAULT 'N' NOT NULL, 
    LATE_DAY          NUMBER           
)
/

COMMENT ON TABLE BOOK_RENT_INFO IS '대출(대여)'
/

COMMENT ON COLUMN BOOK_RENT_INFO.RENT_CODE IS '대출코드'
/

COMMENT ON COLUMN BOOK_RENT_INFO.RENT_MEMBER IS '대여인'
/

COMMENT ON COLUMN BOOK_RENT_INFO.RENT_BOOK_CODE IS '대여한 책 코드'
/

COMMENT ON COLUMN BOOK_RENT_INFO.RENT_DATE IS '대출한 날'
/

COMMENT ON COLUMN BOOK_RENT_INFO.RETURN_DATE IS '대출일 + 등급별 대여가능일'
/

COMMENT ON COLUMN BOOK_RENT_INFO.IS_RETURN IS '''Y'' / ''N'' DEFAULT = ''N'''
/

COMMENT ON COLUMN BOOK_RENT_INFO.LATE_DAY IS '반납시 반납일>반납예정일 이면 갱신'
/

CREATE OR REPLACE VIEW BOOK_RENT_VIEW
AS
SELECT BOOK_CODE
    , BOOK_TITLE
    , PUBLISHER
    , AUTHOR
    , BOOK_PUBLICATION_DATE
    , ACQUISITION_DATE
    , BOOK_IMAGE_NAME
    , I.BOOK_CLASS
    , BOOK_CLASS_NAME
    , RENT_CODE
    , RENT_DATE
    , RETURN_DATE
    , IS_RETURN
    , RENT_MEMBER
FROM BOOK_INFO I, BOOK_CLASS C, BOOK_RENT_INFO R
WHERE I.BOOK_CLASS = C.BOOK_CLASS
AND I.BOOK_CODE = R.RENT_BOOK_CODE
ORDER BY RENT_DATE, RENT_CODE;
대출 정보 띄우기 위한 view에요 나중에 추가해줘요

CREATE OR REPLACE PROCEDURE INSERT_BOOK_RENT(
    V_MEMBER_CODE LIB_MEMBER.MEMBER_CODE%TYPE
    , V_BOOK_CODE BOOK_INFO.BOOK_CODE%TYPE
)
IS
    V_RENT_DATE BOOK_RENT_INFO.RENT_DATE%TYPE;
    V_RETURN_DATE BOOK_RENT_INFO.RETURN_DATE%TYPE;
BEGIN
    -- INSERT 쿼리에 필요한 RENT_DATE 생성
    V_RENT_DATE := TRUNC(SYSDATE, 'DD');
    
    -- INSERT 쿼리에 필요한 RETURN_DATE 생성
    SELECT AVAILABLE_RENT_DATE + V_RENT_DATE
    INTO V_RETURN_DATE
    FROM LIB_MEMBER_LEVEL L, LIB_MEMBER M
    WHERE L.MEMBER_LEVEL = M.MEMBER_LEVEL
    AND MEMBER_CODE = V_MEMBER_CODE;
    
    -- 대출정보 INSERT
    INSERT INTO BOOK_RENT_INFO (
        RENT_CODE
        , RENT_MEMBER
        , RENT_BOOK_CODE
        , RENT_DATE
        , RETURN_DATE
    ) VALUES (
        (SELECT 'RENT_'||NVL(MAX(TO_NUMBER(SUBSTR(RENT_CODE, 6))) + 1, 1) FROM BOOK_RENT_INFO)
        , V_MEMBER_CODE
        , V_BOOK_CODE
        , V_RENT_DATE
        , V_RETURN_DATE
    );
    

END;
/

CREATE OR REPLACE PROCEDURE INSERT_BOOK_RENT(
    V_MEMBER_CODE LIB_MEMBER.MEMBER_CODE%TYPE
    , V_BOOK_CODE BOOK_INFO.BOOK_CODE%TYPE
)
IS
    V_RENT_DATE BOOK_RENT_INFO.RENT_DATE%TYPE;
    V_RETURN_DATE BOOK_RENT_INFO.RETURN_DATE%TYPE;
BEGIN
    -- INSERT 쿼리에 필요한 RENT_DATE 생성
    V_RENT_DATE := TRUNC(SYSDATE, 'DD');
    
    -- INSERT 쿼리에 필요한 RETURN_DATE 생성
    SELECT AVAILABLE_RENT_DATE + V_RENT_DATE
    INTO V_RETURN_DATE
    FROM LIB_MEMBER_LEVEL L, LIB_MEMBER M
    WHERE L.MEMBER_LEVEL = M.MEMBER_LEVEL
    AND MEMBER_CODE = V_MEMBER_CODE;
    
    -- 대출정보 INSERT
    INSERT INTO BOOK_RENT_INFO (
        RENT_CODE
        , RENT_MEMBER
        , RENT_BOOK_CODE
        , RENT_DATE
        , RETURN_DATE
    ) VALUES (
        (SELECT 'RENT_'||NVL(MAX(TO_NUMBER(SUBSTR(RENT_CODE, 6))) + 1, 1) FROM BOOK_RENT_INFO)
        , V_MEMBER_CODE
        , V_BOOK_CODE
        , V_RENT_DATE
        , V_RETURN_DATE
    );
    

END;
/

CREATE OR REPLACE PROCEDURE UPDATE_BOOK_RETURN(
    V_RENT_CODE BOOK_RENT_INFO.RENT_CODE%TYPE
)
IS
    V_RETURN_DATE BOOK_RENT_INFO.RETURN_DATE%TYPE;
    V_TODAY DATE := TRUNC(SYSDATE, 'DD');
BEGIN
    -- 해당하는 반납건의 RETURN DATE를 받아옴
    SELECT RETURN_DATE
    INTO V_RETURN_DATE
    FROM BOOK_RENT_INFO
    WHERE RENT_CODE = V_RENT_CODE;
    
    -- 반납 기일이 늦은 경우
    IF V_RETURN_DATE < V_TODAY THEN
    UPDATE BOOK_RENT_INFO
    SET
        IS_RETURN = 'Y'
        , LATE_DAY = (V_TODAY - V_RETURN_DATE)
        , RETURN_DATE = SYSDATE
    WHERE RENT_CODE = V_RENT_CODE;
    
    --그 외 반납 기일 안에 반납 했을 경우
    ELSE
    UPDATE BOOK_RENT_INFO
    SET
        IS_RETURN = 'Y'
        , RETURN_DATE = SYSDATE
    WHERE RENT_CODE = V_RENT_CODE;
    END IF;
    
    -- 트랜젝션 없을시 COMMIT 넣어줌
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE UPDATE_BOOK_RETURN(
    V_RENT_CODE BOOK_RENT_INFO.RENT_CODE%TYPE
)
IS
    V_RENT_MEMBER BOOK_RENT_INFO.RENT_MEMBER%TYPE;
    V_RETURN_DATE BOOK_RENT_INFO.RETURN_DATE%TYPE;
    V_TODAY DATE := TRUNC(SYSDATE, 'DD');
BEGIN
    -- 해당하는 반납건의 RETURN DATE를 받아옴
    SELECT RETURN_DATE, RENT_MEMBER
    INTO V_RETURN_DATE, V_RENT_MEMBER
    FROM BOOK_RENT_INFO
    WHERE RENT_CODE = V_RENT_CODE;
    
    -- 반납 기일이 늦은 경우
    IF V_RETURN_DATE < V_TODAY THEN
    UPDATE BOOK_RENT_IN

CREATE TABLE BOOK_CLASS
(
    BOOK_CLASS               VARCHAR2(20)    PRIMARY KEY, 
    BOOK_CLASS_NAME          VARCHAR2(20)    NOT NULL, 
    BOOK_CLASS_RENT_COUNT    NUMBER          DEFAULT 0 
)
/

COMMENT ON TABLE BOOK_CLASS IS '책 분류의 이름과 총 대여 횟수(분류별 목록 띄웠을 때 정렬하기 위함)'
/

COMMENT ON COLUMN BOOK_CLASS.BOOK_CLASS IS '책 분류 번호'
/

COMMENT ON COLUMN BOOK_CLASS.BOOK_CLASS_NAME IS '책 분류의 이름'
/

COMMENT ON COLUMN BOOK_CLASS.BOOK_CLASS_RENT_COUNT IS 'DEFAULT = 0'
/
INSERT INTO BOOK_CLASS (BOOK_CLASS, BOOK_CLASS_NAME) VALUES ('0', '총류');
INSERT INTO BOOK_CLASS (BOOK_CLASS, BOOK_CLASS_NAME) VALUES ('1', '철학');
INSERT INTO BOOK_CLASS (BOOK_CLASS, BOOK_CLASS_NAME) VALUES ('2', '종교');
INSERT INTO BOOK_CLASS (BOOK_CLASS, BOOK_CLASS_NAME) VALUES ('3', '사회과학');
INSERT INTO BOOK_CLASS (BOOK_CLASS, BOOK_CLASS_NAME) VALUES ('4', '순수과학');
INSERT INTO BOOK_CLASS (BOOK_CLASS, BOOK_CLASS_NAME) VALUES ('5', '기술과학');
INSERT INTO BOOK_CLASS (BOOK_CLASS, BOOK_CLASS_NAME) VALUES ('6', '예술');
INSERT INTO BOOK_CLASS (BOOK_CLASS, BOOK_CLASS_NAME) VALUES ('7', '어학');
INSERT INTO BOOK_CLASS (BOOK_CLASS, BOOK_CLASS_NAME) VALUES ('8', '문학');
INSERT INTO BOOK_CLASS (BOOK_CLASS, BOOK_CLASS_NAME) VALUES ('9', '역사');


CREATE TABLE BOOK_INFO
(
    BOOK_CODE                VARCHAR2(100)    PRIMARY KEY, 
    BOOK_TITLE               VARCHAR2(100)    NOT NULL, 
    PUBLISHER                VARCHAR2(50)     NOT NULL, 
    AUTHOR                   VARCHAR2(100)    NOT NULL, 
    BOOK_PUBLICATION_DATE    NUMBER           NOT NULL, 
    ACQUISITION_DATE         DATE             DEFAULT SYSDATE, 
    BOOK_PREVIEW             VARCHAR2(300)    , 
    BOOK_IMAGE_NAME          VARCHAR2(100)    , 
    BOOK_CLASS               VARCHAR2(20)     REFERENCES BOOK_CLASS(BOOK_CLASS), 
    IS_AVAILABLE             VARCHAR2(10)     DEFAULT 'Y'
);
/

COMMENT ON TABLE BOOK_INFO IS '책 정보'
/
COMMENT ON COLUMN BOOK_INFO.BOOK_CODE IS '책 코드(BOOK_1,... BOOK_144, ...)'
/
COMMENT ON COLUMN BOOK_INFO.BOOK_TITLE IS '책 제목'
/
COMMENT ON COLUMN BOOK_INFO.PUBLISHER IS '출판사'
/
COMMENT ON COLUMN BOOK_INFO.AUTHOR IS '작가'
/
COMMENT ON COLUMN BOOK_INFO.BOOK_PUBLICATION_DATE IS '도서발행년도'
/
COMMENT ON COLUMN BOOK_INFO.ACQUISITION_DATE IS '도서취득일'
/
COMMENT ON COLUMN BOOK_INFO.BOOK_PREVIEW IS '책 설명'
/
COMMENT ON COLUMN BOOK_INFO.BOOK_IMAGE_NAME IS '책 이미지이름'
/
COMMENT ON COLUMN BOOK_INFO.BOOK_CLASS IS '책 카테고리 번호 (0~9)'
/
COMMENT ON COLUMN BOOK_INFO.IS_AVAILABLE IS '현재 대여 가능한지 Y/N'

INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_1', '첫책', '가출판', '김작가', 1987, '0');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_2', '두책', '나출판', '이작가', 1988, '1');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_3', '세책', '다출판', '박작가', 1989, '2');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_4', '네책', '라출판', '최작가', 1990, '3');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_5', '닷책', '마출판', '강작가', 1991, '4');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_6', '엿책', '바출판', '임작가', 1992, '5');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_7', '이레책', '사출판', '지작가', 1993, '6');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_8', '여드레책', '아출판', '진작가', 1994, '7');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_9', '아흐레책', '자출판', '하작가', 1995, '8');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_10', '열책', '차출판', '주작가', 1996, '9');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_11', '열한책', '카출판', '침작가', 1997, '0');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_12', '열두책', '타출판', '풍작가', 1998, '1');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_13', '열세책', '파출판', '커작가', 1999, '2');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_14', '열네책', '하출판', '봉작가', 2000, '3');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_15', '열닷책', '거출판', '초작가', 2001, '4');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_16', '열엿책', '너출판', '우작가', 2002, '5');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_17', '열일곱책', '더출판', '유작가', 2003, '6');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_18', '열여덟책', '러출판', '기작가', 2004, '7');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_19', '열아홉책', '머출판', '한작가', 2005, '8');
INSERT INTO BOOK_INFO (BOOK_CODE, BOOK_TITLE, PUBLISHER, AUTHOR, BOOK_PUBLICATION_DATE, BOOK_CLASS) VALUES ('BOOK_20', '스무책', '버출판', '제작가', 2006, '9');


CREATE TABLE MONTHLY_BOOK_RANK
(
    RANK_MONTH    VARCHAR2(20)     PRIMARY KEY, 
    RANK_1      VARCHAR2(100)    REFERENCES BOOK_INFO (BOOK_CODE), 
    RANK_2      VARCHAR2(100)    REFERENCES BOOK_INFO (BOOK_CODE), 
    RANK_3      VARCHAR2(100)    REFERENCES BOOK_INFO (BOOK_CODE), 
    RANK_4      VARCHAR2(100)    REFERENCES BOOK_INFO (BOOK_CODE), 
    RANK_5      VARCHAR2(100)    REFERENCES BOOK_INFO (BOOK_CODE), 
    RANK_6      VARCHAR2(100)    REFERENCES BOOK_INFO (BOOK_CODE), 
    RANK_7      VARCHAR2(100)    REFERENCES BOOK_INFO (BOOK_CODE), 
    RANK_8      VARCHAR2(100)    REFERENCES BOOK_INFO (BOOK_CODE), 
    RANK_9      VARCHAR2(100)    REFERENCES BOOK_INFO (BOOK_CODE)
);
/
COMMENT ON TABLE MONTHLY_BOOK_RANK IS '월간 책 대여 순위기록 테이블'
/
COMMENT ON COLUMN MONTHLY_BOOK_RANK.RANK_MONTH IS 'YYYY-MM 형식'
/
COMMENT ON COLUMN MONTHLY_BOOK_RANK.RANK_1 IS '한권도 대출되지 않았을때를 대비해 1~9위를 NULLABLE로 설계함'
/
COMMENT ON COLUMN MONTHLY_BOOK_RANK.RANK_2 IS '2위 책'
/
COMMENT ON COLUMN MONTHLY_BOOK_RANK.RANK_3 IS '3위 책'
/
COMMENT ON COLUMN MONTHLY_BOOK_RANK.RANK_4 IS '4위 책'
/
COMMENT ON COLUMN MONTHLY_BOOK_RANK.RANK_5 IS '5위 책'
/
COMMENT ON COLUMN MONTHLY_BOOK_RANK.RANK_6 IS '6위 책'
/
COMMENT ON COLUMN MONTHLY_BOOK_RANK.RANK_7 IS '7위 책'
/
COMMENT ON COLUMN MONTHLY_BOOK_RANK.RANK_8 IS '8위 책'
/
COMMENT ON COLUMN MONTHLY_BOOK_RANK.RANK_9 IS '9위 책'
/
CREATE OR REPLACE VIEW BOOK_INFO_VIEW
AS
SELECT BOOK_CODE
    , BOOK_TITLE
    , PUBLISHER
    , AUTHOR
    , BOOK_PUBLICATION_DATE
    , ACQUISITION_DATE
    , BOOK_PREVIEW
    , BOOK_IMAGE_NAME
    , I.BOOK_CLASS
    , BOOK_CLASS_NAME
    , BOOK_CLASS_RENT_COUNT
    , IS_AVAILABLE
FROM BOOK_INFO I, BOOK_CLASS C
WHERE I.BOOK_CLASS = C.BOOK_CLASS
ORDER BY ACQUISITION_DATE DESC;
/
select * from BOOK_INFO;
ALTER TABLE BOOK_INFO ADD(IS_AVAILABLE VARCHAR2(10));
UPDATE BOOK_INFO
SET IS_AVAILABLE = 'Y';

select * from BOOK_INFO;

INSERT INTO MONTHLY_BOOK_RANK (RANK_MONTH, RANK_1, RANK_2, RANK_3, RANK_4, RANK_5, RANK_6, RANK_7, RANK_8, RANK_9) VALUES ('2021-04', 'BOOK_3', 'BOOK_2', 'BOOK_1', 'BOOK_6', 'BOOK_5', 'BOOK_4', 'BOOK_9', 'BOOK_8', 'BOOK_7');


#20220410
CREATE OR REPLACE VIEW BOOK_INFO_VIEW
AS
SELECT BOOK_CODE
    , BOOK_TITLE
    , PUBLISHER
    , AUTHOR
    , BOOK_PUBLICATION_DATE
    , ACQUISITION_DATE
    , BOOK_PREVIEW
    , BOOK_IMAGE_NAME
    , I.BOOK_CLASS
    , BOOK_CLASS_NAME
    , BOOK_CLASS_RENT_COUNT
    , IS_AVAILABLE
FROM BOOK_INFO I, BOOK_CLASS C
WHERE I.BOOK_CLASS = C.BOOK_CLASS
ORDER BY ACQUISITION_DATE DESC;
/

CREATE OR REPLACE VIEW BOOK_RENT_VIEW
AS
SELECT BOOK_CODE
    , BOOK_TITLE
    , PUBLISHER
    , AUTHOR
    , BOOK_PUBLICATION_DATE
    , ACQUISITION_DATE
    , BOOK_IMAGE_NAME
    , I.BOOK_CLASS
    , BOOK_CLASS_NAME
    , RENT_CODE
    , RENT_DATE
    , RETURN_DATE
    , IS_RETURN
    , RENT_MEMBER
    , IS_AVAILABLE
FROM BOOK_INFO I, BOOK_CLASS C, BOOK_RENT_INFO R
WHERE I.BOOK_CLASS = C.BOOK_CLASS
AND I.BOOK_CODE = R.RENT_BOOK_CODE
ORDER BY RENT_DATE, RENT_CODE;

CREATE TABLE BOOK_RENT_COUNT
(
    BOOK_CODE              VARCHAR2(100)    PRIMARY KEY, 
    RENT_COUNT_IN_MONTH    NUMBER           DEFAULT 0 NOT NULL, 
    RENT_COUNT_TOTAL       NUMBER           DEFAULT 0 NOT NULL 
)
/
COMMENT ON TABLE BOOK_RENT_COUNT IS '책 대여 횟수 테이블'
/
COMMENT ON COLUMN BOOK_RENT_COUNT.BOOK_CODE IS '책 코드'
/
COMMENT ON COLUMN BOOK_RENT_COUNT.RENT_COUNT_IN_MONTH IS '한달 지날때마다 초기화됨'
/
COMMENT ON COLUMN BOOK_RENT_COUNT.RENT_COUNT_TOTAL IS '총 대여횟수'
/
ALTER TABLE BOOK_RENT_COUNT
    ADD CONSTRAINT FK_BOOK_RENT_COUNT_BOOK_CODE_B FOREIGN KEY (BOOK_CODE)
        REFERENCES BOOK_INFO (BOOK_CODE)
/

CREATE TABLE BOARD_INFO(
    BOARD_CODE VARCHAR2(100) PRIMARY KEY
    , BOARD_TITLE VARCHAR2(100) NOT NULL
    , BOARD_CONTENT VARCHAR2(1000)
    , REG_MEMBER VARCHAR2(100) REFERENCES LIB_MEMBER(MEMBER_CODE) ON DELETE SET NULL
    , REG_DATE DATE DEFAULT SYSDATE
    , IS_SECURITY NUMBER DEFAULT 1 --1:전체공개, 2:관리자/나만 공개
    , IS_NOTICE NUMBER DEFAULT 2 --1 공지, 2:공지아님
    , READ_CNT NUMBER DEFAULT 1
    , FILE_NAME VARCHAR2(100)
    , SEQ NUMBER
);

INSERT INTO BOARD_INFO VALUES('BOARD_001', '도서관 이용안내', '내용', 'MEMBER_1', SYSDATE, 0, 1, 0, NULL, SEQ.NEXTVAL);
INSERT INTO BOARD_INFO VALUES('BOARD_002', '코로나 방역지침안내', '내용', 'MEMBER_1', SYSDATE, 0, 1, 0, NULL, SEQ.NEXTVAL);
INSERT INTO BOARD_INFO VALUES('BOARD_003', '도서관 방문 자제', '내용', 'MEMBER_2', SYSDATE, 1, 1, 0, NULL, SEQ.NEXTVAL);
INSERT INTO BOARD_INFO VALUES('BOARD_003', '스터디룸 도둑 예방', '내용', 'MEMBER_2', SYSDATE, 0, 1, 0, NULL, SEQ.NEXTVAL);


-- DROP TABLE QNA_INFO;

CREATE TABLE QNA_INFO(
    QNA_CODE VARCHAR2(100) PRIMARY KEY
    , QNA_TITLE VARCHAR2(100) NOT NULL
    , QNA_CONTENT VARCHAR2(1000)
    , REG_MEMBER VARCHAR2(100) REFERENCES LIB_MEMBER(MEMBER_CODE) ON DELETE SET NULL
    , REG_DATE DATE DEFAULT SYSDATE
    , IS_SECURITY NUMBER DEFAULT 1 --1:전체공개, 2:관리자/나만 공개
    , IS_NOTICE NUMBER DEFAULT 2 --1 공지, 2:공지아님
    , READ_CNT NUMBER DEFAULT 1
    , FILE_NAME VARCHAR2(100)
);

INSERT INTO QNA_INFO VALUES('QNA_001', '질문드립니다1', '내용1', 'MEMBER_1', SYSDATE, 0, 1, 0, NULL);
INSERT INTO QNA_INFO VALUES('QNA_002', '질문드립니다2', '내용2', 'MEMBER_1', SYSDATE, 0, 1, 0, NULL);
INSERT INTO QNA_INFO VALUES('QNA_003', '질문드립니다3', '내용3', 'MEMBER_2', SYSDATE, 1, 1, 0, NULL);

COMMIT;